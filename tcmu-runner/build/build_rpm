#! /usr/bin/bash
set -ex

PROJECT=tcmu-runner
BRANCH=`branch_slash_filter $BRANCH`
CEPH_BRANCH=$(branch_slash_filter $CEPH_BRANCH)

# Only do actual work when we are an RPM distro
if test "$DISTRO" != "fedora" -a "$DISTRO" != "centos" -a "$DISTRO" != "rhel"; then
    exit 0
fi

# This will set the RELEASE variable
get_rpm_dist

## Get the desired CEPH_BRANCH/CEPH_SHA1 ceph repo
# Get .repo file from appropriate shaman build
REPO_URL="https://shaman.ceph.com/api/repos/ceph/$CEPH_BRANCH/$CEPH_SHA1/$DISTRO/$RELEASE/flavors/default/repo"
TIME_LIMIT=1200
INTERVAL=30
REPO_FOUND=0

# poll shaman for up to 10 minutes
while [ "$SECONDS" -le "$TIME_LIMIT" ]
do
  if `curl --fail -L $REPO_URL > $WORKSPACE/shaman.repo`; then
    echo "Ceph repo file has been added from shaman"
    REPO_FOUND=1
    break
  else
    sleep $INTERVAL
  fi
done

if [[ "$REPO_FOUND" -eq 0 ]]; then
  echo "Ceph lib repo does NOT exist in shaman"
  exit 1
fi

# Install the dependencies
sudo yum install -y mock

## Get some basic information about the system and the repository
VERSION="$(git describe --abbrev=0 --tags HEAD | sed -e 's/v//1;' | cut -d - -f 1)"
REVISION="$(git describe --tags HEAD | sed -e 's/v//1;' | cut -d - -f 2- | sed 's/-/./g' | sed 's/^rc/0./')"
if [ "$VERSION" = "$REVISION" ]; then
  REVISION="1"
fi

# Create dummy dist tar
tar cf dist/${PROJECT}-${VERSION}.tar.gz \
        --exclude .git --exclude dist \
        --transform "s,^,${PROJECT}-${VERSION}/," *
tar tfv dist/${PROJECT}-${VERSION}.tar.gz

# Update spec version
sed -i "s/^Version:.*$/Version:\t${VERSION}/g" $WORKSPACE/${PROJECT}.spec
sed -i "s/^Release:.*$/Release:\t${REVISION}%{?dist}/g" $WORKSPACE/${PROJECT}.spec
sed -i 's/^[# ]*%define _RC.*$//g' tcmu-runner.spec
# for debugging
cat $WORKSPACE/${PROJECT}.spec

## Create the source rpm
echo "Building SRPM"
rpmbuild \
    --define "_sourcedir $WORKSPACE/dist" \
    --define "_specdir $WORKSPACE/dist" \
    --define "_builddir $WORKSPACE/dist" \
    --define "_srcrpmdir $WORKSPACE/dist/SRPMS" \
    --define "_rpmdir $WORKSPACE/dist/RPMS" \
    --nodeps -bs $WORKSPACE/${PROJECT}.spec
SRPM=$(readlink -f $WORKSPACE/dist/SRPMS/*.src.rpm)

DISTRO_ARCH=${ARCH}
if [[ "${ARCH}" = "arm64" ]] ; then
	DISTRO_ARCH="aarch64"
fi

# add shaman repo file to mock config
cat /etc/mock/${MOCK_TARGET}-${RELEASE}-${DISTRO_ARCH}.cfg > tcmu-runner.cfg
echo "" >> tcmu-runner.cfg
echo "config_opts['yum.conf'] += \"\"\"" >> tcmu-runner.cfg
cat $WORKSPACE/shaman.repo >> tcmu-runner.cfg
echo "\"\"\"" >> tcmu-runner.cfg
# for debugging
cat tcmu-runner.cfg

## Build the binaries with mock
# disable 'glfs' because centos9 packages aren't available
echo "Building RPMs"
sudo mock --verbose --without glfs -r tcmu-runner.cfg --scrub=all
sudo mock --verbose --without glfs -r tcmu-runner.cfg --resultdir=$WORKSPACE/dist/RPMS/ ${SRPM} || ( tail -n +1 $WORKSPACE/dist/RPMS/{root,build}.log && exit 1 )

## Upload the created RPMs to chacra
chacra_endpoint="tcmu-runner/${BRANCH}/${GIT_COMMIT}/${DISTRO}/${RELEASE}"

[ "$FORCE" = true ] && chacra_flags="--force" || chacra_flags=""

# push binaries to chacra
find $WORKSPACE/dist/RPMS/ | egrep "\.$DISTRO_ARCH\.rpm" | $VENV/chacractl binary ${chacra_flags} create ${chacra_endpoint}/$DISTRO_ARCH/
PACKAGE_MANAGER_VERSION=$(rpm --queryformat '%{VERSION}-%{RELEASE}\n' -qp $(find $WORKSPACE/dist/RPMS/ | egrep "\.$DISTRO_ARCH\.rpm" | head -1))

# write json file with build info
cat > $WORKSPACE/repo-extra.json << EOF
{
    "version":"$VERSION",
    "package_manager_version":"$PACKAGE_MANAGER_VERSION",
    "build_url":"$BUILD_URL",
    "root_build_cause":"$ROOT_BUILD_CAUSE",
    "node_name":"$NODE_NAME",
    "job_name":"$JOB_NAME"
}
EOF
# post the json to repo-extra json to chacra
curl -X POST -H "Content-Type:application/json" --data "@$WORKSPACE/repo-extra.json" -u $CHACRACTL_USER:$CHACRACTL_KEY ${chacra_url}repos/${chacra_endpoint}/extra/

# start repo creation
$VENV/chacractl repo update ${chacra_endpoint}

echo Check the status of the repo at: https://shaman.ceph.com/api/repos/${chacra_endpoint}
