#!/usr/bin/env bash
set -o errexit
set -o pipefail

if [[ ! -f $WORKSPACE/ceph.zip ]]; then echo "ERROR: The Ceph Windows build zip file doesn't exist at '$WORKSPACE/ceph.zip'"; exit 1; fi
if [[ ! -f $CEPH_WINDOWS_CONF ]]; then echo "ERROR: The Ceph Windows config file doesn't exist at '$CEPH_WINDOWS_CONF'"; exit 1; fi
if [[ ! -f $CEPH_KEYRING ]]; then echo "ERROR: The Ceph keyring file doesn't exist at '$CEPH_KEYRING'"; exit 1; fi

if [[ -z $WINDOWS_SSH_USER ]]; then echo "ERROR: The WINDOWS_SSH_USER env variable is not set"; exit 1; fi
if [[ -z $WINDOWS_VM_IP ]]; then echo "ERROR: The WINDOWS_VM_IP env variable is not set"; exit 1; fi
if [[ -z $UBUNTU_SSH_USER ]]; then echo "ERROR: The UBUNTU_SSH_USER env variable is not set"; exit 1; fi
if [[ -z $UBUNTU_VM_IP ]]; then echo "ERROR: The UBUNTU_VM_IP env variable is not set"; exit 1; fi

export SSH_USER=$WINDOWS_SSH_USER
export SSH_ADDRESS=$WINDOWS_VM_IP

WIN_USERSPACE_CRASH_DUMPS=${WIN_USERSPACE_CRASH_DUMPS:-"C:\\userspace_crash_dumps"}
COLLECT_EVENT_LOGS_SCRIPT_URL="https://raw.githubusercontent.com/ceph/ceph-build/main/scripts/ceph-windows/collect-event-logs.ps1"

#
# Clone ceph-win32-tests repo
#
SSH_TIMEOUT=5m ssh_exec git.exe clone https://github.com/ceph/ceph-win32-tests.git /workspace/repos/ceph-win32-tests

#
# Set Windows user-space crash dumps directory
#
ssh_exec powershell.exe /workspace/repos/ceph-win32-tests/test_host/set_userspace_crashdump_location.ps1 -dumpDir $WIN_USERSPACE_CRASH_DUMPS

#
# Copy the ceph.conf and keyring to the Windows VM
#
ssh_exec powershell.exe mkdir -force /ProgramData/ceph/out
ssh_exec powershell.exe mkdir -force /ProgramData/ceph/logs
scp_upload $CEPH_WINDOWS_CONF /ProgramData/ceph/ceph.conf
scp_upload $CEPH_KEYRING /ProgramData/ceph/keyring

#
# Setup the Ceph Windows build in the Windows VM
#
SSH_TIMEOUT=5m scp_upload $WORKSPACE/ceph.zip /ceph.zip
SSH_TIMEOUT=10m ssh_exec powershell.exe "\$ProgressPreference='SilentlyContinue'; Expand-Archive -Path /ceph.zip -DestinationPath / -Force"
ssh_exec powershell.exe "Add-MpPreference -ExclusionPath 'C:\ceph'"
ssh_exec powershell.exe "New-Service -Name ceph-rbd -BinaryPathName 'c:\ceph\rbd-wnbd.exe service'"
ssh_exec powershell.exe net.exe start ceph-rbd

#
# Collect artifacts on script exit
#
function collect_artifacts() {
    rm -rf $WORKSPACE/artifacts
    mkdir -p $WORKSPACE/artifacts
    mkdir -p $WORKSPACE/artifacts/cluster
    mkdir -p $WORKSPACE/artifacts/cluster/ceph_logs

    SSH_USER=$UBUNTU_SSH_USER SSH_ADDRESS=$UBUNTU_VM_IP ssh_exec ./ceph/build/bin/ceph status
    SSH_USER=$UBUNTU_SSH_USER SSH_ADDRESS=$UBUNTU_VM_IP ssh_exec free -h
    SSH_USER=$UBUNTU_SSH_USER SSH_ADDRESS=$UBUNTU_VM_IP ssh_exec df -h
    SSH_USER=$UBUNTU_SSH_USER SSH_ADDRESS=$UBUNTU_VM_IP ssh_exec \
        "du -sh ./ceph-vstart/*"

    SSH_USER=$UBUNTU_SSH_USER SSH_ADDRESS=$UBUNTU_VM_IP ssh_exec \
        "journalctl -b > /tmp/journal"
    SSH_USER=$UBUNTU_SSH_USER SSH_ADDRESS=$UBUNTU_VM_IP scp_download \
        /tmp/journal $WORKSPACE/artifacts/cluster/journal

    SSH_USER=$UBUNTU_SSH_USER SSH_ADDRESS=$UBUNTU_VM_IP scp_download \
        './ceph-vstart/out/*.log' $WORKSPACE/artifacts/cluster/ceph_logs/

    scp_download /workspace/test_results $WORKSPACE/artifacts/test_results
    if [[ "$INCLUDE_USERSPACE_CRASH_DUMPS" = true ]]; then
        scp_download /userspace_crash_dumps $WORKSPACE/artifacts/userspace_crash_dumps
    fi
    if [[ "$INCLUDE_CEPH_ZIP" = true ]]; then
        cp $WORKSPACE/ceph.zip $WORKSPACE/artifacts/ceph.zip
    fi

    mkdir -p $WORKSPACE/artifacts/client

    scp_download /ProgramData/ceph/logs $WORKSPACE/artifacts/client/logs
    cp $CEPH_WINDOWS_CONF $WORKSPACE/artifacts/client
    ssh_exec /wnbd/wnbd-client.exe version
    ssh_exec curl.exe --retry-max-time 30 --retry 10 -L -o /workspace/collect-event-logs.ps1 $COLLECT_EVENT_LOGS_SCRIPT_URL
    SSH_TIMEOUT=30m ssh_exec powershell.exe /workspace/collect-event-logs.ps1 -LogDirectory /workspace/eventlogs
    scp_download /workspace/eventlogs $WORKSPACE/artifacts/client/eventlogs
}
trap collect_artifacts EXIT

# View cluster status before test run
SSH_USER=$UBUNTU_SSH_USER SSH_ADDRESS=$UBUNTU_VM_IP ssh_exec ./ceph/build/bin/ceph status
#
# Run the Windows tests
#
SSH_TIMEOUT=2h ssh_exec powershell.exe /workspace/repos/ceph-win32-tests/test_host/run_tests.ps1 -workerCount 4

WIN_WORKUNITS_DIR="$WORKSPACE/ceph/qa/workunits/windows"
LOCAL_SCRIPT_PATH="$WIN_WORKUNITS_DIR/run-tests.ps1"
if [[ -f $LOCAL_SCRIPT_PATH ]]; then
    echo "Using locally cloned test script: $LOCAL_SCRIPT_PATH"
    scp_upload $WIN_WORKUNITS_DIR /workspace/workunits
    SSH_TIMEOUT=1h ssh_exec powershell.exe -File /workspace/workunits/run-tests.ps1
else
    # The following is only used on Quincy, make sure to leave this in place while Quincy
    # is still being tested.
    REMOTE_SCRIPT_URL="https://raw.githubusercontent.com/ceph/ceph/1db85786588ad974621a6b669a3aae4e8799b1e6/qa/workunits/windows/test_rbd_wnbd.py"
    echo "Using remote test script from: $REMOTE_SCRIPT_URL"
    ssh_exec curl.exe -s -L -o /workspace/test_rbd_wnbd.py $REMOTE_SCRIPT_URL

    SSH_TIMEOUT=30m ssh_exec python.exe /workspace/test_rbd_wnbd.py --test-name RbdTest --iterations 100
    SSH_TIMEOUT=60m ssh_exec python.exe /workspace/test_rbd_wnbd.py --test-name RbdFioTest --iterations 100
    SSH_TIMEOUT=30m ssh_exec python.exe /workspace/test_rbd_wnbd.py --test-name RbdStampTest --iterations 100

    # It can take a while to setup the partition (~10s), we'll use fewer iterations.
    SSH_TIMEOUT=30m ssh_exec python.exe /workspace/test_rbd_wnbd.py --test-name RbdFsTest --iterations 4
    SSH_TIMEOUT=30m ssh_exec python.exe /workspace/test_rbd_wnbd.py --test-name RbdFsFioTest --iterations 4
    SSH_TIMEOUT=30m ssh_exec python.exe /workspace/test_rbd_wnbd.py --test-name RbdFsStampTest --iterations 4
fi

echo "Windows tests succeeded."
